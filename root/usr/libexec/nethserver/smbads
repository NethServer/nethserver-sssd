#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use Getopt::Std;
use Fcntl qw(:seek);
use esmith::ConfigDB;
use User::grent;
use User::pwent;
use Authen::Krb5;
use Time::Local;


my %opts;
my $verbose = 0;

getopts('v', \%opts);

if($opts{v}) {
    $verbose = 1;
}

my $command = shift;
my $service = shift;

if(! $command) {
    $command = 'help';
}

#
# initkeytab
#
if($command eq 'initkeytab') {
    my $machine = get_machine_principal();
    ! $verbose && open(STDOUT, '>/dev/null');
    kerberos_initialize($machine);
    if( ! init_keytabs()) {
        warn("[ERROR] $0: failed to initialize keytabs\n");
        exit 5;
    }
    kerberos_destroy();
    exit 0;
}


warn("[ERROR] Usage: $0 initkeytab\n");
exit 1;

#
# SUBROUTINES
#

sub init_keytabs()
{

    my @ktConfigs = read_krb_configs();


    # Initialize the system keytab, by adding required
    # primaries. 'cifs' is always added:
    my $exitCode = system(qw(/usr/bin/net ads keytab add -k),
                          keys %{{map { (map { $_ => 1 } 'cifs', @{$_->{primary}}) } @ktConfigs}}
        );

    if($exitCode != 0) {
        warn("[ERROR] $0: failed to add service primaries to system keytab\n");
        return 0;
    }

    # Create the service-specific keytabs, starting from the system
    # keytab and filtering out unrequired primaries:
    foreach (@ktConfigs) {
        if( ! write_keytab($_)) {
            warn("[ERROR] $0: keytab " . $_->{path} . " write error\n");
            return 0;
        }
    }

    return 1;
}


sub write_keytab()
{
    my %cfg = %{$_[0]};
    my $errors = 0;

    pipe $or, $ow;
    pipe $ir, $iw;

    my @kill_slots = ();

    my $rePrimaries  = join('|', @{$cfg{primary}});

    if(fork()) {
        close($iw);
        close($or);

        $| = 1;

        syswrite $ow, join("\n", 'rkt /etc/krb5.keytab', 'list', 'quit') . "\n";

        while(<$ir>) {
            chomp;
            if(m|^\s*(\d+)\s+(\d+)\s+(\S+)\s*$|){
                if($3 !~ m|^($rePrimaries)/|) {
                    push @kill_slots, $1;
                }
            }
        }

        close $ir;
        close $ow;
    } else {
        close $ir;
        close $ow;

        # Change environment to ensure output from ktutil is what we
        # expect to be:
        delete $ENV{TERM};
        $ENV{LANG} = 'C';
        open(STDOUT, '>&', $iw);
        open(STDIN, '<&', $or);
        $| = 1;
        exec('/usr/bin/ktutil');
    }

    wait;
    if($? != 0) {
        $errors ++;
    }

    $verbose && warn '[INFO] keytab path set to ' . $cfg{kt_path} . "\n";

    unlink $cfg{kt_path};
    open(WKT, '|-', '/usr/bin/ktutil');
    print WKT "rkt /etc/krb5.keytab\n";
    foreach (reverse @kill_slots) {
        print WKT "delent $_\n";
    }
    print WKT "wkt " . $cfg{kt_path} . "\n";
    if( ! close WKT ) {
        $errors ++;
    }

    chown $cfg{owner}->uid, -1, $cfg{kt_path};
    chmod $cfg{perms}, $cfg{kt_path};

    return ($errors == 0 ? 1 : 0);
}

sub read_krb_configs()
{
    my $configDb = esmith::ConfigDB->open_ro();

    if( ! $configDb ) {
        warn("[WARNING] $0: could not open ConfigDB\n");
        return ();
    }

    my @ktConfigs = ();

    foreach my $service ($configDb->get_all_by_prop(type => 'service')) {
        if( $service->prop('status') ne 'enabled' ||  ! defined $service->prop('KrbStatus') || $service->prop('KrbStatus') ne 'enabled') {
            next;
        }

        my $owner = getpwnam($service->prop('KrbKeytabOwner') || $service->key);

        if( ! $owner) {
            $owner = getpwnam('root');
        }

        my $kt_path = $service->prop('KrbKeytabPath') || sprintf('/var/lib/misc/nsrv-%s.keytab', $service->key);
        my $cc_path = $service->prop('KrbCredentialsCachePath') || sprintf('/tmp/krb5cc_%d', $owner->uid);
        my $perms = oct($service->prop('KrbKeytabPerms')) || 0400;

        push @ktConfigs, {
            primary => [split(',', $service->prop('KrbPrimaryList') || '')],
            owner => $owner,
            perms => $perms,
            kt_path => $kt_path,
            cc_path => $cc_path,
            service => $service->key,
        };
    }

    return @ktConfigs;
}

#
# guess the machine principal:
#
sub get_machine_principal()
{
    my %cfg = esmith::ConfigDB->as_hash();
    my $principal = uc(substr($cfg{SystemName}->{type}, 0, 15) . "\$\@" .  $cfg{sssd}{Realm});
    return $principal;
}

sub kerberos_initialize($)
{
    my $user = shift;
    $ENV{KRB5CCNAME} = "/tmp/smbads_" . $$;
    $verbose && warn "[INFO] getting $user credentials from system keytab\n";
    system('/usr/bin/kinit', '-k', $user);
    return ($? == 0 ? 1 : 0);
}

sub kerberos_destroy()
{
    $ENV{KRB5CCNAME} = "/tmp/smbads_" . $$;
    system(qw(/usr/bin/kdestroy));
    return ($? == 0 ? 1 : 0);
}
